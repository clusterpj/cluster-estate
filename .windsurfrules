# Coding Guidelines for Cluster Estate Project

## Technology Stack
- Frontend Framework: Next.js (App Router)
- Styling: TailwindCSS with CSS Variables
- Language: TypeScript
- UI Components: 
  - shadcn/ui
  - Radix UI primitives
  - Framer Motion for animations
- Backend: Supabase
- Internationalization: i18n
- State Management: Zustand
- ical.js for calendar synchronization

## TypeScript Best Practices

- Enable strict mode in tsconfig.json for all files
- Use explicit return types for all functions, especially API routes and hooks
- Create dedicated type files for complex data structures
- For React components:
  - Define prop interfaces with required/optional properties clearly marked
  - Use React.FC type sparingly; prefer explicit prop interfaces
  - Use React.PropsWithChildren when components accept children
- For API functions:
  - Define request and response type interfaces
  - Use zod schemas to validate incoming data
  - Provide type guards for conditional logic
- Avoid type assertions (as Type) when possible; use proper type narrowing
- Use discriminated unions for complex state management
- Leverage TypeScript utility types (Partial, Pick, Omit, etc.)
- Use generics for reusable components and functions
- Properly type asynchronous code (Promise<T>)
- Create index.ts files to export and re-export types
- Use readonly modifiers for arrays and objects that shouldn't be modified

## Code Organization

### Project Structure
- Follow Next.js app router pattern with `[locale]` parameter
- Organize components by feature within route directories
- Keep common UI components in `@/components/ui`
- Group API routes by feature in `/app/api`
- Store TypeScript interfaces in `/types` directory

### Component Guidelines
- Create smaller, focused components
- Separate logic from presentation when appropriate
- Use custom hooks for complex logic
- Follow established naming conventions
- Export page components as default, use named exports for others

## Internationalization

- Store all user-facing text in locale files
- Never hardcode text in components
- When creating new components, all new translation keys must be added to the `messages/en.json` file
- Use `useTranslations` for client components, `getTranslations` for server components
- Document context for translators when adding strings
- Maintain hierarchical organization of translation keys that match component structure

## Styling

- Use Tailwind CSS utility classes
- Follow project's design system
- Use `cn` utility for conditional classes
- Utilize shadcn/ui and Radix UI components

## API and Data Handling

- Use React Query for data fetching and mutations
- Type API request/response payloads
- Use appropriate Supabase client (server vs client)
- Implement proper error handling
- Follow RESTful patterns for endpoints

## State Management

- React Query for server state
- React's useState/useReducer for local state
- Context providers for shared state
- Type all state properly

## Error Handling

- Use discriminated union types for error states
- Implement error boundaries where needed
- Provide user-friendly error messages
- Handle edge cases and potential failures

## Forms

- Use React Hook Form with zod validation
- Define schema types for form values
- Validate all form inputs
- Provide clear error messages

## Performance Considerations

- Optimize expensive computations
- Use proper loading states
- Follow React best practices
- Use Next.js Image component

## Database Guidelines

- Use parameterized queries
- Implement proper error handling
- Follow established data model
- Use transactions for multiple operations

## Accessibility

- Use semantic HTML
- Implement ARIA attributes
- Ensure proper focus management
- Maintain sufficient color contrast

## Security

- Validate all user inputs
- Implement proper authentication checks
- Protect against common vulnerabilities