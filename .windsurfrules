# Next.js Development Guidelines

## Technology Stack
- Frontend Framework: Next.js (App Router)
- Styling: TailwindCSS with CSS Variables
- Language: TypeScript
- UI Components: 
  - shadcn/ui
  - Radix UI primitives
  - Framer Motion for animations
- Backend: Supabase
- Internationalization: i18n
- State Management: Zustand

## Architecture Requirements

### Component Structure
- Implement atomic design principles
- Create modular, reusable components
- Maintain clear component hierarchy
- Use TypeScript interfaces for props
- Document component APIs

### Type Safety
- Strict TypeScript configuration
- No `any` types without justification
- Type all API responses and requests
- Maintain central types directory

### Styling Guidelines
- Follow tailwind.config.ts theme configuration
- Use CSS variables for dynamic theming
- Maintain consistent spacing scale
- Implement responsive design patterns
- Follow component-specific style modules

## Development Standards

### Code Quality
- Run type checking before commits
- Implement proper error boundaries
- Add error handling for async operations
- Include loading states
- Write unit tests for critical paths

### Documentation Requirements
- JSDoc comments for functions/components
- README files for complex features
- API documentation with examples
- Update changelog for significant changes
- Document state management patterns

### Performance Optimization
- Implement code splitting
- Use Next.js Image component
- Optimize API calls with SWR/React Query
- Monitor bundle size
- Implement proper caching strategies

### Accessibility Standards
- Follow WCAG 2.1 guidelines
- Implement proper ARIA labels
- Ensure keyboard navigation
- Test with screen readers
- Maintain color contrast ratios

### Internationalization
- Use type-safe translation keys
- Implement RTL support where needed
- Follow locale-specific formatting
- Document translation workflow
- Handle dynamic content translation

## Code Review Process
- Review against these guidelines
- Verify TypeScript compliance
- Check accessibility standards
- Validate internationalization
- Ensure proper documentation
- Verify test coverage

## Version Control
- Use meaningful commit messages
- Follow branch naming convention
- No direct commits to main branch
- Create detailed PR descriptions
- Link issues to PRs

## Code Modification Rules
1. Never modify existing code without:
   - Documentation of changes
   - Test coverage
   - Team review
   - Performance impact assessment

2. Code Validation Steps:
   - Type check: `tsc --noEmit`
   - Lint: `eslint`
   - Test: `jest`
   - Build: `next build`

3. New Implementation Requirements:
   - Research existing solutions
   - Document design decisions
   - Create technical specification
   - Consider scalability impact