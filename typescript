import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { redirect } from 'next/navigation'
import { BookingStatus, BookingPaymentStatus } from '@/types/booking-status'
import { DataTable } from './data-table'
import { columns } from './columns'
import type { Locale } from '@/config/i18n'

export default async function BookingsPage({ params }: { params: { locale: Locale } }) {
  const supabase = createServerComponentClient({ cookies })
  
  // Verify admin role
  const { data: { session } } = await supabase.auth.getSession()
  if (!session) {
    redirect(`/${params.locale}/auth/login`)
  }

  const { data: profile } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', session.user.id)
    .single()

  if (!profile || profile.role !== 'admin') {
    redirect(`/${params.locale}`)
  }

  // Fetch bookings with related data
  const { data: bookings } = await supabase
    .from('bookings')
    .select(`
      id,
      created_at,
      check_in,
      check_out,
      guests,
      total_price,
      status,
      payment_status,
      payment_id,
      properties:property_id (title),
      users:user_id (email, full_name)
    `)
    .order('created_at', { ascending: false })

  if (!bookings) {
    return <div>No bookings found</div>
  }

  // Transform data for table
  const formattedBookings = bookings.map(booking => ({
    id: booking.id,
    createdAt: new Date(booking.created_at).toLocaleDateString(),
    checkIn: new Date(booking.check_in).toLocaleDateString(),
    checkOut: new Date(booking.check_out).toLocaleDateString(),
    guests: booking.guests,
    totalPrice: booking.total_price,
    status: booking.status,
    paymentStatus: booking.payment_status,
    paymentId: booking.payment_id,
    property: booking.properties?.title,
    user: booking.users?.full_name || booking.users?.email
  }))

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-2xl font-bold mb-6">Bookings Management</h1>
      <DataTable columns={columns} data={formattedBookings} />
    </div>
  )
}
import { ColumnDef } from "@tanstack/react-table"
import { Badge } from "@/components/ui/badge"
import { BookingStatus, BookingPaymentStatus } from "@/types/booking-status"

export type Booking = {
  id: string
  createdAt: string
  checkIn: string
  checkOut: string
  guests: number
  totalPrice: number
  status: BookingStatus
  paymentStatus: BookingPaymentStatus
  paymentId?: string
  property: string
  user: string
}

export const columns: ColumnDef<Booking>[] = [
  {
    accessorKey: "id",
    header: "Booking ID",
  },
  {
    accessorKey: "createdAt",
    header: "Created",
  },
  {
    accessorKey: "property",
    header: "Property",
  },
  {
    accessorKey: "user",
    header: "Guest",
  },
  {
    accessorKey: "checkIn",
    header: "Check-in",
  },
  {
    accessorKey: "checkOut",
    header: "Check-out",
  },
  {
    accessorKey: "guests",
    header: "Guests",
  },
  {
    accessorKey: "totalPrice",
    header: "Total",
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("totalPrice"))
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(amount)

      return <div className="font-medium">{formatted}</div>
    },
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ row }) => {
      const status = row.getValue("status") as BookingStatus
      return (
        <Badge variant={status === 'confirmed' ? 'default' : 'secondary'}>
          {status}
        </Badge>
      )
    },
  },
  {
    accessorKey: "paymentStatus",
    header: "Payment",
    cell: ({ row }) => {
      const status = row.getValue("paymentStatus") as BookingPaymentStatus
      return (
        <Badge 
          variant={
            status === 'completed' ? 'default' : 
            status === 'failed' ? 'destructive' : 'secondary'
          }
        >
          {status}
        </Badge>
      )
    },
  },
]
"use client"

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow
                key={row.id}
                data-state={row.getIsSelected() && "selected"}
              >
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { cn } from '@/lib/utils'
import type { Locale } from '@/config/i18n'

interface SidebarProps {
  locale: Locale
}

export function Sidebar({ locale }: SidebarProps) {
  const pathname = usePathname()

  const navItems = [
    {
      name: 'Dashboard',
      href: `/${locale}/admin`,
      icon: 'dashboard',
    },
    {
      name: 'Bookings',
      href: `/${locale}/admin/bookings`,
      icon: 'calendar',
    },
    {
      name: 'Properties',
      href: `/${locale}/admin/properties`,
      icon: 'home',
    },
    {
      name: 'Users',
      href: `/${locale}/admin/users`,
      icon: 'users',
    },
  ]

  return (
    <div className="w-64 border-r h-screen p-4">
      <nav className="space-y-1">
        {navItems.map((item) => (
          <Link
            key={item.href}
            href={item.href}
            className={cn(
              'flex items-center px-3 py-2 text-sm font-medium rounded-md',
              pathname === item.href
                ? 'bg-gray-100 text-gray-900'
                : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
            )}
          >
            <span className="truncate">{item.name}</span>
          </Link>
        ))}
      </nav>
    </div>
  )
}
